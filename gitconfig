[alias]
  # View the current working tree status using the short format
  s = status -s
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Commit all changes
  ca = !git add -A && git commit -av
  # Switch to a branch, creating it if necessary
  go = checkout -B
  # Clean up squash n merged branch
  db = branch -D
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  co = checkout
  # View the SHA, description, and history graph of the latest 20 commits
  l = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -n 20"
  aa = "add -A ."
  # verbose commit
  ci = commit -v
  # Amend last commit
  ac = "ci --amend"
  # just cherry pick
  pick = cherry-pick
  # show files with conflicts
  conflicted = diff --name-only --diff-filter=U
  trash = "!git reset --hard HEAD && git clean -df"
  # merge master into stage and push
  mall = "!git up && git co stage && git merge master && git push origin stage"
  # open branch in github
  browse = "!hub browse"
  # open comparison in github
  compare = "!hub compare"
[apply]
  # Detect whitespace errors when applying a patch
  # whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  # attributesfile = ~/.gitattributes
  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
  # whitespace = space-before-tab,indent-with-non-tab,trailing-space

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
[fetch]
  prune = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"

[push]
  default = simple
[user]
  name = Sam Moore
  email = samandmoore@gmail.com
[github]
  user = samandmoore
[hub]
  protocol = https
[rerere]
  enabled = true
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
[init]
  templatedir = ~/.git_template
[include]
  path = ~/.gitconfig.local
